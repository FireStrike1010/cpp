#include<iostream>
#include<string>
#include <cstdint>

using namespace std;

//Лабораторная работа №2. Виртуальные методы

//Создать базовый класс Array с полями: массив типа unsigned char и поле для хранения количества элементов у текущего объекта-массива.
//Максимально возможный размер массива задается статической константой. Реализовать конструктор инициализации,
//задающий количество элементов и начальное значение (по умолчанию 0). Реализовать метод доступа к элементу,
//перегрузив операцию индексирования []. При этом должна выполняться проверка индекса на допустимость.
//Реализовать в классе Array виртуальную функцию поэлементного сложения массивов. Реализовать два класса,
//переопределив виртуальную функцию сложения. Вызывающая программа должна продемонстрировать все варианты вызова виртуальных функций.

//18. Создать класс Octal (Класс для работы с беззнаковыми целыми восьмеричными числами,
//использует для представления числа массив из 100 элементов типа unsigned char,
//каждый элемент которого является восьмеричной цифрой. Младшая цифра имеет меньший индекс (единицы - в нулевом элементе массива).)
//и класс String (Класс для работы со строками, аналогичными строками Turbo Pascal (строка представляется как массив 255 байт,
//длина - в первом байте). Максимальный размер строки должен задаваться.).

//Я использовал uint8_t вместо unsigned char, так как char представление все ломает((

class Array{
    private:
    int len;
    uint8_t *arr;
    public:
    Array(unsigned int length, string array, unsigned int start = 0){
        len = length;
        unsigned int str_len = array.length();
        uint8_t res[len] = {0};
        for (int i = start; i < str_len + start; i++){
            res[i] = array[str_len-(i-start)-1]-48;
        }
        arr = res;
    }
    int operator[] (int index){
        if ((index < -len) || (index >= len)){
            cout << "Индекс - " << index << " за границами массива" << "\n";
            return -1;
        }
        if (index < 0){index = index + len;}
        return arr[index];
    }
    string print(){
        return to_string(arr);
    }
};

int main()
{
    Array x = Array(100, "48321");
    cout << x.print();
    return 0;
}
